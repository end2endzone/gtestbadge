/**
 * This file was generated by bin2cpp v2.1.0
 * Copyright (C) 2013-2018 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'template.svg', last modified 1534187611.
 * Do not modify this file.
 */
#include "BadgeTemplate.h"
#include <stdio.h> //for FILE
#include <stdint.h>

#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers
#endif
#include <windows.h>

#include <psapi.h> //for EnumProcessModules()
#pragma comment( lib, "psapi.lib" )

namespace bin2cpp
{
  class BadgeTemplateFile : public virtual bin2cpp::File
  {
  public:
    BadgeTemplateFile() :
      hProcess(NULL),
      hModule(NULL),
      hResourceInfoBlock(NULL),
      hResHandle(NULL),
      mBufferSize(0),
      mBuffer(NULL)
    {
      loadResource();
    }
    ~BadgeTemplateFile() { unloadResource(); }
    virtual size_t getSize() const { return mBufferSize; }
    virtual const char * getFilename() const { return "badge.svg"; }
    virtual const char * getBuffer() const { return mBuffer; }
    void loadResource()
    {
      //Get a handle to this process
      hProcess = OpenProcess(  PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, GetCurrentProcessId() );
      if (hProcess)
      {
        //Find the main HMODULE of the process
        DWORD cbNeeded;
        if ( EnumProcessModules( hProcess, &hModule, sizeof(hModule), &cbNeeded) )
        {
          //Retrieve the resource
          hResourceInfoBlock = FindResource(hModule, "dfslglofbjhsh3jhf0vc8", "CUSTOM");
          if (hResourceInfoBlock)
          {
            hResHandle = LoadResource(hModule, hResourceInfoBlock);
            if (hResHandle)
            {
              mBuffer = (const char *)LockResource(hResHandle);
              mBufferSize = SizeofResource(hModule, hResourceInfoBlock);
            }
          }
        }
      }
    }
    virtual void unloadResource()
    {
      if (hResHandle)
      {
        FreeResource(hResHandle);
        hResHandle = NULL;
        mBuffer = NULL;
        mBufferSize = 0;
      }
      hResourceInfoBlock = NULL;
      hModule = NULL;
      if (hProcess)
      {
        CloseHandle(hProcess);
        hProcess = NULL;
      }
    }
    virtual bool save(const char * iFilename) const
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      fwrite(buffer, 1, fileSize, f);
      fclose(f);
      return true;
    }
  private:
    HANDLE hProcess;
    HMODULE hModule;
    HRSRC hResourceInfoBlock;
    HGLOBAL hResHandle;
    DWORD mBufferSize;
    const char * mBuffer;
  };
  const File & getBadgeTemplateFile() { static BadgeTemplateFile _instance; return _instance; }
}; //bin2cpp
